[
    {
        "id": "1f411be02ab63862",
        "type": "tab",
        "label": "Z-Wave Controller",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a97dfe7bb351bf46",
        "type": "tab",
        "label": "Message Broker",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "800b06c9c0e3dff7",
        "type": "group",
        "z": "1f411be02ab63862",
        "name": "exchange messages with z-wave controller",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "807b59493c63c6b5",
            "8f73c98ea2fb6019",
            "c464961f4d24a38b",
            "712857b73501e96a",
            "1a0cab3de23ecf0c",
            "4bc3610ddc285e04",
            "063ba55d44ccd84a",
            "84f806ac6efa3037",
            "a57bc6b06e714885",
            "f25df70eb9464d09",
            "10129746c3677820",
            "fe82b1b65fd7042a",
            "76049d71e0f18037",
            "774a45fd82b39e49",
            "6235c2a237d187b4",
            "052dca420f30f468",
            "7727b1ae3a741131",
            "da91aeb1badc2cc6",
            "b033eb67405d512f",
            "8851c91d5f4ac235",
            "d1cc926a0732e498",
            "99a84367f7bf4ffa"
        ],
        "x": 34,
        "y": 159,
        "w": 1372,
        "h": 242
    },
    {
        "id": "c86dc82a6849388d",
        "type": "group",
        "z": "a97dfe7bb351bf46",
        "name": "automation message broker with semnatics inspired by mqtt",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "96c70db260437753",
            "6b25f4c463835160",
            "b857726cf2a5c767",
            "529cc14a539ac320",
            "38efdcf08073a5ac",
            "c554502adc5b7656",
            "5f14ec4cee3294ac",
            "9383af2d758e72c8"
        ],
        "x": 14,
        "y": 19,
        "w": 792,
        "h": 202
    },
    {
        "id": "77c15860555312f9",
        "type": "group",
        "z": "1f411be02ab63862",
        "name": "forward commands from clients to z-wave controller",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3431af9fadf254c0",
            "da5269e74a9b54dd",
            "e561194217443d28",
            "8ba1b10ce727a1f3",
            "8a3d176644e579db"
        ],
        "x": 34,
        "y": 19,
        "w": 892,
        "h": 122
    },
    {
        "id": "af5868441cac20d3",
        "type": "group",
        "z": "1f411be02ab63862",
        "name": "forward VALUE_UPDATED messages to clients",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "color": "#000000",
            "label-position": "sw"
        },
        "nodes": [
            "9ee9d0011c3da8fe",
            "6c7e25e13cc8dc0b",
            "cbce903350b96584",
            "13366aaaed6d6a0e",
            "f8a3dae5a7167584"
        ],
        "x": 374,
        "y": 519,
        "w": 972,
        "h": 90
    },
    {
        "id": "f2230ea95240b9c0",
        "type": "group",
        "z": "1f411be02ab63862",
        "name": "forward GET_VALUE_RESPONSE messages to clients",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000",
            "label-position": "sw"
        },
        "nodes": [
            "be0fb486ed97a353",
            "06f3bbbc1d516cf1",
            "6fcf2b7a2b9cbf10",
            "f5304bc4374c63ec"
        ],
        "x": 474,
        "y": 419,
        "w": 872,
        "h": 90
    },
    {
        "id": "e6bef42fa28d88a9",
        "type": "group",
        "z": "1f411be02ab63862",
        "name": "send z-wave controller connection status to clients",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "5fcf03941d248d26",
            "ba4c6018b004ebe4",
            "86b259c55abdad3c",
            "010d5dd2a0ed1243",
            "aa999e9350e9a507",
            "70c033dfbc378ee6",
            "bb1e653386e2ab9d",
            "78f6ec76be5e10e9",
            "01d2633aa2dfb782",
            "9276f1baa86c1f67"
        ],
        "x": 34,
        "y": 619,
        "w": 1332,
        "h": 182
    },
    {
        "id": "d4736a641abe6778",
        "type": "websocket-listener",
        "z": "a97dfe7bb351bf46",
        "path": "/ws/automation",
        "wholemsg": "true"
    },
    {
        "id": "29dd7a1892ce9251",
        "type": "websocket-client",
        "path": "ws://localhost:1880/ws/automation",
        "tls": "",
        "wholemsg": "true",
        "hb": "5",
        "subprotocol": ""
    },
    {
        "id": "8f73c98ea2fb6019",
        "type": "zwave-js",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "networkIdentifier": "1",
        "serialPort": "/dev/serial/by-id/usb-Silicon_Labs_CP2102N_USB_to_UART_Bridge_Controller_3a2938a76455ed11adc495131d62bc44-if00-port0",
        "name": "ZWave Controller",
        "encryptionKey": "",
        "encryptionKeyS2U": "",
        "encryptionKeyS2A": "",
        "encryptionKeyS2AC": "",
        "ackTimeout": "",
        "controllerTimeout": "",
        "sendResponseTimeout": "",
        "sendDataCallback": "",
        "serialAPIStarted": "",
        "logLevelPin": "none",
        "logLevel": "none",
        "logFile": "",
        "logNodeFilter": "",
        "sendUsageStatistics": false,
        "valueCacheDiskThrottle": "normal",
        "customConfigPath": "",
        "intvwUserCodes": false,
        "softResetUSB": false,
        "outputs": 1,
        "disableOptimisticValueUpdate": false,
        "FWlicenseKey": "NON-COMMERCIAL",
        "scalesTemp": "0x01",
        "scalesHumidity": "0x00",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "807b59493c63c6b5"
            ]
        ]
    },
    {
        "id": "807b59493c63c6b5",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "event",
        "property": "payload.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ALL_NODES_READY",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NODE_LIST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "VALUE_ID_LIST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET_VALUE_RESPONSE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "VALUE_UPDATED",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 490,
        "y": 280,
        "wires": [
            [
                "712857b73501e96a"
            ],
            [
                "f25df70eb9464d09"
            ],
            [
                "1a0cab3de23ecf0c"
            ],
            [
                "da91aeb1badc2cc6"
            ],
            [
                "7727b1ae3a741131"
            ]
        ]
    },
    {
        "id": "c464961f4d24a38b",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "z-wave command",
        "links": [
            "6235c2a237d187b4",
            "76049d71e0f18037",
            "8ba1b10ce727a1f3",
            "a57bc6b06e714885"
        ],
        "x": 140,
        "y": 280,
        "wires": [
            [
                "8f73c98ea2fb6019"
            ]
        ],
        "l": true
    },
    {
        "id": "10129746c3677820",
        "type": "split",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 240,
        "wires": [
            [
                "052dca420f30f468"
            ]
        ]
    },
    {
        "id": "f25df70eb9464d09",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "object",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.networkId",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.object",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "#:(file)::zwaveNetwork",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 240,
        "wires": [
            [
                "10129746c3677820"
            ]
        ]
    },
    {
        "id": "fe82b1b65fd7042a",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "getDefinedValueIDs",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"mode\": \"ValueAPI\",\t   \"node\": payload.nodeId,\t   \"method\": \"getDefinedValueIDs\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 240,
        "wires": [
            [
                "76049d71e0f18037"
            ]
        ]
    },
    {
        "id": "76049d71e0f18037",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "z-wave command",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 1290,
        "y": 240,
        "wires": [],
        "l": true
    },
    {
        "id": "1a0cab3de23ecf0c",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "node:object",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.node",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.object",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 280,
        "wires": [
            [
                "4bc3610ddc285e04"
            ]
        ]
    },
    {
        "id": "4bc3610ddc285e04",
        "type": "split",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 810,
        "y": 280,
        "wires": [
            [
                "063ba55d44ccd84a"
            ]
        ]
    },
    {
        "id": "063ba55d44ccd84a",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "currentValue",
        "property": "payload.property",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "currentValue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 280,
        "wires": [
            [
                "84f806ac6efa3037"
            ]
        ]
    },
    {
        "id": "84f806ac6efa3037",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "getValue",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"mode\":\"ValueAPI\",\t   \"node\": topic,\t   \"method\":\"getValue\",\t   \"params\": [\t       {\t           \"commandClassName\": payload.commandClassName,\t           \"commandClass\": payload.commandClass,\t           \"endpoint\": payload.endpoint,\t           \"property\": payload.property,\t           \"propertyName\": payload.propertyName\t        }\t   ]\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 280,
        "wires": [
            [
                "a57bc6b06e714885"
            ]
        ]
    },
    {
        "id": "a57bc6b06e714885",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "z-wave command",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 1270,
        "y": 280,
        "wires": [],
        "l": true
    },
    {
        "id": "712857b73501e96a",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "ready",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ready",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 200,
        "wires": [
            [
                "774a45fd82b39e49"
            ]
        ]
    },
    {
        "id": "774a45fd82b39e49",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "getNodes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"mode\":\"ControllerAPI\",\"method\":\"getNodes\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 200,
        "wires": [
            [
                "6235c2a237d187b4"
            ]
        ]
    },
    {
        "id": "6235c2a237d187b4",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "z-wave command",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 950,
        "y": 200,
        "wires": [],
        "l": true
    },
    {
        "id": "da5269e74a9b54dd",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "77c15860555312f9",
        "name": "^set/zwave/\\d+/\\d+/\\d+/\\d+$",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^set/zwave/\\d+/\\d+/\\d+/\\d+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 500,
        "y": 100,
        "wires": [
            [
                "e561194217443d28"
            ]
        ]
    },
    {
        "id": "e561194217443d28",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "77c15860555312f9",
        "name": "set value",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t   $topic := topic.$split('/');\t   {\t       \"node\": $number($topic[3]),\t       \"mode\":\"ValueAPI\",\t       \"method\": \"setValue\",\t       \"params\": [\t           {\t               \"commandClass\": $number($topic[5]),\t               \"endpoint\": $number($topic[4]),\t               \"property\": \"targetValue\"\t           },\t           payload,\t           {}\t        ]\t   }\t)",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 100,
        "wires": [
            [
                "8ba1b10ce727a1f3"
            ]
        ]
    },
    {
        "id": "8ba1b10ce727a1f3",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "77c15860555312f9",
        "name": "set value",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 840,
        "y": 100,
        "wires": [],
        "l": true
    },
    {
        "id": "3431af9fadf254c0",
        "type": "websocket in",
        "z": "1f411be02ab63862",
        "g": "77c15860555312f9",
        "name": "",
        "server": "",
        "client": "29dd7a1892ce9251",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "da5269e74a9b54dd"
            ]
        ]
    },
    {
        "id": "052dca420f30f468",
        "type": "function",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "cacheDevice",
        "func": "const message = RED.util.cloneMessage(msg)\nconst networkId = Number.parseInt(message.topic)\nconst networks = flow.get('zwaveNetworks') || {}\nconst devices = networks[networkId] || {}\n\ndevices[message.payload.nodeId] = message.payload\nnetworks[networkId] = devices\nflow.set('zwaveNetworks', networks)\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 240,
        "wires": [
            [
                "fe82b1b65fd7042a"
            ]
        ]
    },
    {
        "id": "7727b1ae3a741131",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "value updated",
        "mode": "link",
        "links": [
            "f8a3dae5a7167584"
        ],
        "x": 680,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "13366aaaed6d6a0e",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "af5868441cac20d3",
        "name": "currentValue",
        "property": "payload.object.property",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "currentValue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 560,
        "wires": [
            [
                "cbce903350b96584"
            ]
        ]
    },
    {
        "id": "f8a3dae5a7167584",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "af5868441cac20d3",
        "name": "value updated",
        "links": [
            "7727b1ae3a741131"
        ],
        "x": 470,
        "y": 560,
        "wires": [
            [
                "13366aaaed6d6a0e"
            ]
        ],
        "l": true
    },
    {
        "id": "cbce903350b96584",
        "type": "function",
        "z": "1f411be02ab63862",
        "g": "af5868441cac20d3",
        "name": "value updated",
        "func": "const networks = flow.get('zwaveNetworks') || {}\nconst devices = networks[msg.payload.networkId] || {}\nconst device = devices[msg.payload.node] || {}\nconst endpoints = device.endpoints || {}\nconst values = endpoints.values || {}\n\nvalues[msg.payload.object.commandClass] = msg.payload.object.newValue\nendpoints[msg.payload.object.endpoint] = values\ndevice.endpoints = endpoints\ndevices[msg.payload.node] = device\nnetworks[msg.payload.networkId] = devices\nflow.set('zwaveNetworks', networks)\nreturn {\n    topic: 'zwave/networks',\n    payload: networks,\n    retain: true\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 560,
        "wires": [
            [
                "6c7e25e13cc8dc0b"
            ]
        ]
    },
    {
        "id": "6c7e25e13cc8dc0b",
        "type": "rbe",
        "z": "1f411be02ab63862",
        "g": "af5868441cac20d3",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 950,
        "y": 560,
        "wires": [
            [
                "9ee9d0011c3da8fe"
            ]
        ]
    },
    {
        "id": "9ee9d0011c3da8fe",
        "type": "websocket out",
        "z": "1f411be02ab63862",
        "g": "af5868441cac20d3",
        "name": "",
        "server": "",
        "client": "29dd7a1892ce9251",
        "x": 1170,
        "y": 560,
        "wires": []
    },
    {
        "id": "da91aeb1badc2cc6",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "get value response",
        "mode": "link",
        "links": [
            "be0fb486ed97a353"
        ],
        "x": 690,
        "y": 320,
        "wires": [],
        "l": true
    },
    {
        "id": "be0fb486ed97a353",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "f2230ea95240b9c0",
        "name": "get value response",
        "links": [
            "da91aeb1badc2cc6"
        ],
        "x": 590,
        "y": 460,
        "wires": [
            [
                "06f3bbbc1d516cf1"
            ]
        ],
        "l": true
    },
    {
        "id": "06f3bbbc1d516cf1",
        "type": "function",
        "z": "1f411be02ab63862",
        "g": "f2230ea95240b9c0",
        "name": "get value response",
        "func": "const value = msg.payload.object.currentValue\n\nif (value !== undefined) {\n\n    const networks = flow.get('zwaveNetworks') || {}\n    const devices = networks[msg.payload.networkId] || {}\n    const device = devices[msg.payload.node] || {}\n    const endpoints = device.endpoints || {}\n    const values = endpoints.values || {}\n    const message = RED.util.cloneMessage(msg)\n\n    values[msg.payload.object.commandClass] = value\n    endpoints[msg.payload.object.endpoint] = values\n    device.endpoints = endpoints\n    devices[msg.payload.node] = device\n    networks[msg.payload.networkId] = devices\n    flow.set(\"zwaveNetworks\", networks)\n    message.topic = 'zwave/networks'\n    message.payload = networks\n    message.retain = true\n    return message\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 460,
        "wires": [
            [
                "6fcf2b7a2b9cbf10"
            ]
        ]
    },
    {
        "id": "6fcf2b7a2b9cbf10",
        "type": "rbe",
        "z": "1f411be02ab63862",
        "g": "f2230ea95240b9c0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 950,
        "y": 460,
        "wires": [
            [
                "f5304bc4374c63ec"
            ]
        ]
    },
    {
        "id": "f5304bc4374c63ec",
        "type": "websocket out",
        "z": "1f411be02ab63862",
        "g": "f2230ea95240b9c0",
        "name": "",
        "server": "",
        "client": "29dd7a1892ce9251",
        "x": 1170,
        "y": 460,
        "wires": []
    },
    {
        "id": "8a3d176644e579db",
        "type": "comment",
        "z": "1f411be02ab63862",
        "g": "77c15860555312f9",
        "name": "forward commands from clients to z-wave controller",
        "info": "* Listens for messages whose `msg.topic` matches\n  `^zet/zwave/\\d+/\\d+/\\d+/\\d+$`\n\n* Formats z-wave `setValue` commands whose value id is constructed from\n  the fields of the topic and whose `targetValue` attribute is\n  `msg.payload`\n\n(Currently, only setValue commands using the targetValue property are\nsupported.)",
        "x": 250,
        "y": 60,
        "wires": []
    },
    {
        "id": "b033eb67405d512f",
        "type": "comment",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "exchange messages with z-wave controller",
        "info": "In addition to handling commands sent by clients, implements\ninitialization logic triggered by the controller emitting\n`ALL_NODES_READY`:\n\n```mermaid\n---\ntitle: Initialize Z-Wave Network Model On Receipt of ALL_NODES_READY\n---\nsequenceDiagram\n\n    participant controller as Z-Wave Controller\n    participant flow as Flow\n    participant client as Client(s)\n\n    controller ->> flow: ALL_NODES_READY\n    flow ->> controller: getNodes\n    controller ->>+ flow: NODE_LIST\n\n    loop for each z-wave node id\n\n        flow ->> flow: add device to cached network model\n        flow ->>- controller: getValueIds\n        controller ->> flow: VALUE_ID_LIST\n\n        loop for each value id\n\n          opt property == currentValue\n              flow ->> controller: getValue\n              controller ->>+ flow: GET_VALUE_RESPONSE\n              flow ->> flow: update cached network model for device\n              flow ->>- client: send cached model\n          end\n        end\n    end\n```\n",
        "x": 220,
        "y": 200,
        "wires": []
    },
    {
        "id": "8851c91d5f4ac235",
        "type": "comment",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "only currentValue properties are supported by the data model",
        "info": "",
        "x": 1100,
        "y": 320,
        "wires": []
    },
    {
        "id": "d1cc926a0732e498",
        "type": "status",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "z-wave controller status",
        "scope": [
            "8f73c98ea2fb6019"
        ],
        "x": 160,
        "y": 360,
        "wires": [
            [
                "99a84367f7bf4ffa"
            ]
        ]
    },
    {
        "id": "99a84367f7bf4ffa",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "z-wave controller status",
        "mode": "link",
        "links": [
            "9276f1baa86c1f67"
        ],
        "x": 390,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "5fcf03941d248d26",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "z-wave controller status",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "zwave/controller/status",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 660,
        "wires": [
            [
                "ba4c6018b004ebe4"
            ]
        ]
    },
    {
        "id": "ba4c6018b004ebe4",
        "type": "delay",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 700,
        "wires": [
            [
                "86b259c55abdad3c"
            ]
        ]
    },
    {
        "id": "86b259c55abdad3c",
        "type": "websocket out",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "",
        "server": "",
        "client": "29dd7a1892ce9251",
        "x": 1190,
        "y": 700,
        "wires": []
    },
    {
        "id": "010d5dd2a0ed1243",
        "type": "inject",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "disconnected",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "initialize",
        "payload": "{\"fill\":\"red\",\"text\":\"disconnected\",\"shape\":\"ring\"}",
        "payloadType": "json",
        "x": 420,
        "y": 720,
        "wires": [
            [
                "78f6ec76be5e10e9"
            ]
        ]
    },
    {
        "id": "aa999e9350e9a507",
        "type": "status",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "websocket connected",
        "scope": [
            "86b259c55abdad3c"
        ],
        "x": 160,
        "y": 760,
        "wires": [
            [
                "70c033dfbc378ee6"
            ]
        ]
    },
    {
        "id": "70c033dfbc378ee6",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 760,
        "wires": [
            [
                "bb1e653386e2ab9d"
            ]
        ]
    },
    {
        "id": "bb1e653386e2ab9d",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "status",
        "rules": [
            {
                "t": "move",
                "p": "status",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 760,
        "wires": [
            [
                "78f6ec76be5e10e9"
            ]
        ]
    },
    {
        "id": "78f6ec76be5e10e9",
        "type": "join",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 570,
        "y": 740,
        "wires": [
            [
                "01d2633aa2dfb782"
            ]
        ]
    },
    {
        "id": "01d2633aa2dfb782",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "zwave/controller/status",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.initialize",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "zwave/controller/status",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 740,
        "wires": [
            [
                "ba4c6018b004ebe4"
            ]
        ]
    },
    {
        "id": "9276f1baa86c1f67",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "e6bef42fa28d88a9",
        "name": "z-wave controller status",
        "links": [
            "99a84367f7bf4ffa"
        ],
        "x": 500,
        "y": 660,
        "wires": [
            [
                "5fcf03941d248d26"
            ]
        ],
        "l": true
    },
    {
        "id": "96c70db260437753",
        "type": "websocket out",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "",
        "server": "d4736a641abe6778",
        "client": "",
        "x": 690,
        "y": 140,
        "wires": []
    },
    {
        "id": "6b25f4c463835160",
        "type": "function",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "retain",
        "func": "const retained = flow.get('retained') || {}\n\ntry {\n\n    if (msg.retain === true) {\n\n        if (msg.topic === undefined) {\n\n            node.error(\"topic required when retain is true\", msg);\n            return msg\n\n        }\n\n        if ((msg.payload !== undefined) && (msg.payload !== '')) {\n\n            retained[msg.topic] = RED.util.cloneMessage(msg)\n\n        } else {\n\n            delete retained[msg.topic]\n\n        }\n\n        flow.set('retained', retained)\n        const message = RED.util.cloneMessage(msg)\n        delete message._session\n        message.retain = false\n        return message\n\n    }\n\n    return msg\n\n} finally {\n\n    node.status({\n        fill: 'blue',\n        shape: 'dot',\n        text: Object.keys(retained).length\n    })\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "96c70db260437753"
            ]
        ]
    },
    {
        "id": "b857726cf2a5c767",
        "type": "status",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "client connection",
        "scope": [
            "c554502adc5b7656"
        ],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "529cc14a539ac320"
            ]
        ]
    },
    {
        "id": "529cc14a539ac320",
        "type": "switch",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "38efdcf08073a5ac"
            ]
        ]
    },
    {
        "id": "38efdcf08073a5ac",
        "type": "function",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "retained",
        "func": "const retained = flow.get('retained') || {}\nconst messages = Object.values(retained)\n\ntry {\n\n    return [messages]\n\n} finally {\n\n    node.status({\n        fill: 'blue',\n        shape: 'dot',\n        text: messages.length\n    })\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "96c70db260437753"
            ]
        ]
    },
    {
        "id": "c554502adc5b7656",
        "type": "websocket in",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "",
        "server": "d4736a641abe6778",
        "client": "",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "5f14ec4cee3294ac"
            ]
        ]
    },
    {
        "id": "5f14ec4cee3294ac",
        "type": "change",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 100,
        "wires": [
            [
                "6b25f4c463835160"
            ]
        ]
    },
    {
        "id": "9383af2d758e72c8",
        "type": "comment",
        "z": "a97dfe7bb351bf46",
        "g": "c86dc82a6849388d",
        "name": "assumes a file-system backed context store exists named 'file'",
        "info": "for _~/.node-red/settings.js_:\n\n```javascript\ncontextStorage: {\n\n    default: { module: 'memory' },\n    file: { module: 'localfilesystem' }\n\n},\n```",
        "x": 260,
        "y": 60,
        "wires": []
    }
]