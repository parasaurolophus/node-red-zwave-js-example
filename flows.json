[
    {
        "id": "374106d820f6917b",
        "type": "tab",
        "label": "Front End",
        "disabled": false,
        "info": "Interoperate with WebSocket clients:\n\n* Handle messages from clients whose topics match\n  `^set/zwave/\\d+/\\d+/\\d+/\\d+$` (where the numeric components of\n  the topic are the network, node, endpoint and command class\n  id's of a Z-Wave _value id_) by forwarding them as `setValue`\n  commands to the Z-Wave controller\n\n  ```mermaid\n  sequenceDiagram\n\n    participant client\n    participant flow\n    participant controller\n    participant device as node 2\n\n    client ->> flow: set/zwave/1/2/0/37:true\n    flow ->> controller: setValue\n    controller ->> device: setValue\n    device ->> device: turn on\n  ```\n\n* Handle `VALUE_UPDATED` messages from the Z-Wave controller by\n  updating the data model and broadcasting it to WebSocket\n  clients as messages with the topic `zwave/network`\n\n  ```mermaid\n  sequenceDiagram\n\n    participant client\n    participant flow\n    participant controller\n    participant device as node 2\n\n    device ->> device: change state\n    device ->> controller: VALUE_UPDATED\n    controller ->> flow: VALUE_UPDATED\n    flow ->> flow: update data model\n    flow ->> client: zwave/network:model\n  ```",
        "env": []
    },
    {
        "id": "1f411be02ab63862",
        "type": "tab",
        "label": "Back End",
        "disabled": false,
        "info": "Interoperate with a Z-Wave controller:\n\n* Provide a link for nodes in this tab and the _Front End_ tab to send\n  command messages to the Z-Wave controller\n\n* Handle `ALL_NODES_READY` messages from the Z-Wave controller by\n  triggering a sequence used to initialize the data model\n\n```mermaid\nsequenceDiagram\n\ncontroller ->> flow: ALL_NODES_READY\nflow ->> controller: getNodes\ncontroller ->> flow: NODES_LIST\nloop for each node\n    flow ->> controller: getDefinedValueIDs\n    controller ->> flow: VALUE_ID_LIST\n    loop for each value id\n        opt property is \"currentValue\"\n            flow ->> controller: getValue\n            controller ->> flow: GET_VALUE_RESPONSE\n            flow ->> flow: initialize data model\n            flow ->> clients: send data model to clients\n        end\n    end\nend\n```",
        "env": []
    },
    {
        "id": "4b6d972a36f40489",
        "type": "tab",
        "label": "Message Broker",
        "disabled": false,
        "info": "Support WebSocket based communication among clients, providing semantics\ninspired by MQTT without requiring an external MQTT broker service.\n\nAssumes that there is a file-system backed context store named `file`\ndefined in _~/.node-red/settings.js_.\n\n```javascript\ncontextStorage: {\n\n    default: { module: 'memory' },\n    file: { module: 'localfilesystem' }\n\n},\n```\n\n* Each message sent to the WebSocket from a client should have `topic`\n  and `payload` properties\n\n* Each message may include a `retain` property which, when `true`,\n  instructs this flow to cache the message in the `file` context store\n\n* Each time a client connects, it is delivered all currently retained\n  messages\n\nNote that each message's `_session` property is deleted before\nprocessing `retain` and then forwarding it to all currently connected\nclients. I.e. this broker broadcasts each message from any client to\nall clients (specifically, the _Back End_ flow tab and the dashboard web\napplication).\n\nNote also that clients can detect when a message is a new real-time event\nvs a retained, possibly stale event by checking the value of `retain`.\nSee documentation for the use of `retain` by MQTT for details.",
        "env": []
    },
    {
        "id": "800b06c9c0e3dff7",
        "type": "group",
        "z": "1f411be02ab63862",
        "name": "exchange messages with the z-wave controller",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "807b59493c63c6b5",
            "8f73c98ea2fb6019",
            "c464961f4d24a38b",
            "c629c0f061d79636",
            "3b28f3ed3d02b87a",
            "b88315dabf11d321",
            "8c7c5fd3f15db0ef",
            "836b7cd5951b3d56",
            "80b28f7ed34fcd65",
            "bcafa36356776290",
            "1d1d41bed6804f99"
        ],
        "x": 94,
        "y": 19,
        "w": 1132,
        "h": 282
    },
    {
        "id": "edcb49d8c0600829",
        "type": "group",
        "z": "1f411be02ab63862",
        "name": "initialize data model triggered by receipt of ALL_NODES_READY event from z-wave controller",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.05",
            "color": "#000000"
        },
        "nodes": [
            "40214102557f4c72",
            "94572c166b5f0613",
            "03ed41ef819b3f99",
            "136bdd2bcb510ec7"
        ],
        "x": 88,
        "y": 313,
        "w": 1124,
        "h": 474
    },
    {
        "id": "9f5cd0f49019ccbd",
        "type": "group",
        "z": "4b6d972a36f40489",
        "name": "websocket based message broker with semantics inspired by mqtt",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "850bcdb0dc51cae8",
            "0a466ae6484ea08d",
            "ad2823c8d3790d72",
            "5553c22baaeb1b99",
            "9a458b33c80238e5",
            "e3245994f6289398",
            "d3f36abf3bc85ef4"
        ],
        "x": 14,
        "y": 19,
        "w": 792,
        "h": 162
    },
    {
        "id": "e97e1f069abed9d0",
        "type": "group",
        "z": "374106d820f6917b",
        "name": "forward setValue commands from websocket clients to the z-wave controller",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3431af9fadf254c0",
            "da5269e74a9b54dd",
            "e561194217443d28",
            "8ba1b10ce727a1f3"
        ],
        "x": 114,
        "y": 19,
        "w": 952,
        "h": 82
    },
    {
        "id": "8e84b6f180d69740",
        "type": "group",
        "z": "374106d820f6917b",
        "name": "forward messages to websocket clients",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "21c86b40c4cfef48",
            "4ad4fb3e84069fc6"
        ],
        "x": 114,
        "y": 119,
        "w": 512,
        "h": 82
    },
    {
        "id": "40214102557f4c72",
        "type": "group",
        "z": "1f411be02ab63862",
        "g": "edcb49d8c0600829",
        "name": "handle ALL_NODES_READY event from the z-wave controller by fetching data for all nodes",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "color": "#000000"
        },
        "nodes": [
            "774a45fd82b39e49",
            "6235c2a237d187b4",
            "5258b20647259df8"
        ],
        "x": 114,
        "y": 339,
        "w": 612,
        "h": 82
    },
    {
        "id": "94572c166b5f0613",
        "type": "group",
        "z": "1f411be02ab63862",
        "g": "edcb49d8c0600829",
        "name": "handle NODE_LIST event from the z-wave controller by fetching all value id's for each node",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f25df70eb9464d09",
            "10129746c3677820",
            "052dca420f30f468",
            "fe82b1b65fd7042a",
            "76049d71e0f18037",
            "860f1bc78e06336e"
        ],
        "x": 114,
        "y": 439,
        "w": 1072,
        "h": 82
    },
    {
        "id": "03ed41ef819b3f99",
        "type": "group",
        "z": "1f411be02ab63862",
        "g": "edcb49d8c0600829",
        "name": "handle VALUE_ID_LIST event from the z-wave controller by fetching currentValue for each value id with such a property",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "1a0cab3de23ecf0c",
            "4bc3610ddc285e04",
            "063ba55d44ccd84a",
            "84f806ac6efa3037",
            "a57bc6b06e714885",
            "d9b4e9ecf74b13d6",
            "7a8280ea5dca8519"
        ],
        "x": 114,
        "y": 539,
        "w": 992,
        "h": 122
    },
    {
        "id": "136bdd2bcb510ec7",
        "type": "group",
        "z": "1f411be02ab63862",
        "g": "edcb49d8c0600829",
        "name": "handle GET_VALUE_RESPONSE event from the z-wave controller by updating the data model and sending it to all websocket clients",
        "style": {
            "label": true,
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "color": "#000000"
        },
        "nodes": [
            "06f3bbbc1d516cf1",
            "d19197aaef49587d",
            "e6ee04b7463db73a"
        ],
        "x": 114,
        "y": 679,
        "w": 835,
        "h": 82
    },
    {
        "id": "d4736a641abe6778",
        "type": "websocket-listener",
        "z": "4b6d972a36f40489",
        "path": "/ws/automation",
        "wholemsg": "true"
    },
    {
        "id": "29dd7a1892ce9251",
        "type": "websocket-client",
        "z": "374106d820f6917b",
        "path": "ws://localhost:1880/ws/automation",
        "tls": "",
        "wholemsg": "true",
        "hb": "5",
        "subprotocol": ""
    },
    {
        "id": "3431af9fadf254c0",
        "type": "websocket in",
        "z": "374106d820f6917b",
        "g": "e97e1f069abed9d0",
        "name": "",
        "server": "",
        "client": "29dd7a1892ce9251",
        "x": 290,
        "y": 60,
        "wires": [
            [
                "da5269e74a9b54dd"
            ]
        ]
    },
    {
        "id": "da5269e74a9b54dd",
        "type": "switch",
        "z": "374106d820f6917b",
        "g": "e97e1f069abed9d0",
        "name": "^set/zwave/\\d+/\\d+/\\d+/\\d+$",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^set/zwave/\\d+/\\d+/\\d+/\\d+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 60,
        "wires": [
            [
                "e561194217443d28"
            ]
        ]
    },
    {
        "id": "e561194217443d28",
        "type": "change",
        "z": "374106d820f6917b",
        "g": "e97e1f069abed9d0",
        "name": "setValue",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t   $topic := topic.$split('/');\t   {\t       \"node\": $number($topic[3]),\t       \"mode\":\"ValueAPI\",\t       \"method\": \"setValue\",\t       \"params\": [\t           {\t               \"commandClass\": $number($topic[5]),\t               \"endpoint\": $number($topic[4]),\t               \"property\": \"targetValue\"\t           },\t           payload,\t           {}\t        ]\t   }\t)",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 60,
        "wires": [
            [
                "8ba1b10ce727a1f3"
            ]
        ]
    },
    {
        "id": "8ba1b10ce727a1f3",
        "type": "link out",
        "z": "374106d820f6917b",
        "g": "e97e1f069abed9d0",
        "name": "setValue command",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 950,
        "y": 60,
        "wires": [],
        "l": true
    },
    {
        "id": "21c86b40c4cfef48",
        "type": "link in",
        "z": "374106d820f6917b",
        "g": "8e84b6f180d69740",
        "name": "send to clients",
        "links": [
            "e6ee04b7463db73a",
            "304e8435a51022bd",
            "bcafa36356776290"
        ],
        "x": 210,
        "y": 160,
        "wires": [
            [
                "4ad4fb3e84069fc6"
            ]
        ],
        "l": true
    },
    {
        "id": "4ad4fb3e84069fc6",
        "type": "websocket out",
        "z": "374106d820f6917b",
        "g": "8e84b6f180d69740",
        "name": "",
        "server": "",
        "client": "29dd7a1892ce9251",
        "x": 450,
        "y": 160,
        "wires": []
    },
    {
        "id": "8f73c98ea2fb6019",
        "type": "zwave-js",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "networkIdentifier": "1",
        "serialPort": "/dev/serial/by-id/usb-Silicon_Labs_CP2102N_USB_to_UART_Bridge_Controller_3a2938a76455ed11adc495131d62bc44-if00-port0",
        "name": "ZWave Controller",
        "encryptionKey": "",
        "encryptionKeyS2U": "",
        "encryptionKeyS2A": "",
        "encryptionKeyS2AC": "",
        "ackTimeout": "",
        "controllerTimeout": "",
        "sendResponseTimeout": "",
        "sendDataCallback": "",
        "serialAPIStarted": "",
        "logLevelPin": "none",
        "logLevel": "none",
        "logFile": "",
        "logNodeFilter": "",
        "sendUsageStatistics": false,
        "valueCacheDiskThrottle": "normal",
        "customConfigPath": "",
        "intvwUserCodes": false,
        "softResetUSB": false,
        "outputs": 1,
        "disableOptimisticValueUpdate": false,
        "FWlicenseKey": "NON-COMMERCIAL",
        "scalesTemp": "0x01",
        "scalesHumidity": "0x00",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "807b59493c63c6b5"
            ]
        ]
    },
    {
        "id": "807b59493c63c6b5",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "event",
        "property": "payload.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "VALUE_UPDATED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALL_NODES_READY",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NODE_LIST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "VALUE_ID_LIST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET_VALUE_RESPONSE",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 550,
        "y": 160,
        "wires": [
            [
                "836b7cd5951b3d56"
            ],
            [
                "c629c0f061d79636"
            ],
            [
                "3b28f3ed3d02b87a"
            ],
            [
                "b88315dabf11d321"
            ],
            [
                "8c7c5fd3f15db0ef"
            ],
            [
                "1d1d41bed6804f99"
            ]
        ]
    },
    {
        "id": "c464961f4d24a38b",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "z-wave command",
        "links": [
            "6235c2a237d187b4",
            "76049d71e0f18037",
            "8ba1b10ce727a1f3",
            "a57bc6b06e714885"
        ],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "8f73c98ea2fb6019"
            ]
        ],
        "l": true
    },
    {
        "id": "10129746c3677820",
        "type": "split",
        "z": "1f411be02ab63862",
        "g": "94572c166b5f0613",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 480,
        "wires": [
            [
                "052dca420f30f468"
            ]
        ]
    },
    {
        "id": "f25df70eb9464d09",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "94572c166b5f0613",
        "name": "object",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.networkId",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.object",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "#:(file)::zwaveNetwork",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 480,
        "wires": [
            [
                "10129746c3677820"
            ]
        ]
    },
    {
        "id": "fe82b1b65fd7042a",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "94572c166b5f0613",
        "name": "getDefinedValueIDs",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"mode\": \"ValueAPI\",\t   \"node\": payload.nodeId,\t   \"method\": \"getDefinedValueIDs\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 480,
        "wires": [
            [
                "76049d71e0f18037"
            ]
        ]
    },
    {
        "id": "76049d71e0f18037",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "94572c166b5f0613",
        "name": "getDefinedValueIDs command",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 1030,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "1a0cab3de23ecf0c",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "03ed41ef819b3f99",
        "name": "node:object",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.node",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.object",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 600,
        "wires": [
            [
                "4bc3610ddc285e04"
            ]
        ]
    },
    {
        "id": "4bc3610ddc285e04",
        "type": "split",
        "z": "1f411be02ab63862",
        "g": "03ed41ef819b3f99",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 600,
        "wires": [
            [
                "063ba55d44ccd84a"
            ]
        ]
    },
    {
        "id": "063ba55d44ccd84a",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "03ed41ef819b3f99",
        "name": "currentValue",
        "property": "payload.property",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "currentValue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 600,
        "wires": [
            [
                "84f806ac6efa3037"
            ],
            [
                "7a8280ea5dca8519"
            ]
        ]
    },
    {
        "id": "84f806ac6efa3037",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "03ed41ef819b3f99",
        "name": "getValue",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"mode\":\"ValueAPI\",\t   \"node\": topic,\t   \"method\":\"getValue\",\t   \"params\": [\t       {\t           \"commandClassName\": payload.commandClassName,\t           \"commandClass\": payload.commandClass,\t           \"endpoint\": payload.endpoint,\t           \"property\": payload.property,\t           \"propertyName\": payload.propertyName\t        }\t   ]\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 580,
        "wires": [
            [
                "a57bc6b06e714885"
            ]
        ]
    },
    {
        "id": "a57bc6b06e714885",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "03ed41ef819b3f99",
        "name": "getValue command",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 990,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "774a45fd82b39e49",
        "type": "change",
        "z": "1f411be02ab63862",
        "g": "40214102557f4c72",
        "name": "getNodes",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"mode\":\"ControllerAPI\",\"method\":\"getNodes\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 380,
        "wires": [
            [
                "6235c2a237d187b4"
            ]
        ]
    },
    {
        "id": "6235c2a237d187b4",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "40214102557f4c72",
        "name": "getNodes command",
        "mode": "link",
        "links": [
            "c464961f4d24a38b"
        ],
        "x": 600,
        "y": 380,
        "wires": [],
        "l": true
    },
    {
        "id": "052dca420f30f468",
        "type": "function",
        "z": "1f411be02ab63862",
        "g": "94572c166b5f0613",
        "name": "cache device",
        "func": "const message = RED.util.cloneMessage(msg)\nconst networkId = Number.parseInt(message.topic)\nconst networks = flow.get('zwaveNetworks') || {}\nconst devices = networks[networkId] || {}\n\ndevices[message.payload.nodeId] = message.payload\nnetworks[networkId] = devices\nflow.set('zwaveNetworks', networks)\nreturn message",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 480,
        "wires": [
            [
                "fe82b1b65fd7042a"
            ]
        ]
    },
    {
        "id": "06f3bbbc1d516cf1",
        "type": "function",
        "z": "1f411be02ab63862",
        "g": "136bdd2bcb510ec7",
        "name": "initialize data model",
        "func": "const value = msg.payload.object.currentValue\n\nif (value !== undefined) {\n\n    const networks = flow.get('zwaveNetworks') || {}\n    const devices = networks[msg.payload.networkId] || {}\n    const device = devices[msg.payload.node] || {}\n    const endpoints = device.endpoints || {}\n    const values = endpoints.values || {}\n    const message = RED.util.cloneMessage(msg)\n\n    values[msg.payload.object.commandClass] = value\n    endpoints[msg.payload.object.endpoint] = values\n    device.endpoints = endpoints\n    devices[msg.payload.node] = device\n    networks[msg.payload.networkId] = devices\n    flow.set(\"zwaveNetworks\", networks)\n    message.topic = 'zwave/networks'\n    message.payload = networks\n    message.retain = true\n    return message\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 720,
        "wires": [
            [
                "e6ee04b7463db73a"
            ]
        ]
    },
    {
        "id": "c629c0f061d79636",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "ALL_NODES_READY",
        "mode": "link",
        "links": [
            "5258b20647259df8"
        ],
        "x": 780,
        "y": 100,
        "wires": [],
        "l": true
    },
    {
        "id": "5258b20647259df8",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "40214102557f4c72",
        "name": "ALL_NODES_READY",
        "links": [
            "c629c0f061d79636"
        ],
        "x": 240,
        "y": 380,
        "wires": [
            [
                "774a45fd82b39e49"
            ]
        ],
        "l": true
    },
    {
        "id": "3b28f3ed3d02b87a",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "NODE_LIST",
        "mode": "link",
        "links": [
            "860f1bc78e06336e"
        ],
        "x": 750,
        "y": 140,
        "wires": [],
        "l": true
    },
    {
        "id": "860f1bc78e06336e",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "94572c166b5f0613",
        "name": "NODE_LIST",
        "links": [
            "3b28f3ed3d02b87a"
        ],
        "x": 210,
        "y": 480,
        "wires": [
            [
                "f25df70eb9464d09"
            ]
        ],
        "l": true
    },
    {
        "id": "b88315dabf11d321",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "VALUE_ID_LIST",
        "mode": "link",
        "links": [
            "d9b4e9ecf74b13d6"
        ],
        "x": 770,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "d9b4e9ecf74b13d6",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "03ed41ef819b3f99",
        "name": "VALUE_ID_LIST",
        "links": [
            "b88315dabf11d321"
        ],
        "x": 220,
        "y": 600,
        "wires": [
            [
                "1a0cab3de23ecf0c"
            ]
        ],
        "l": true
    },
    {
        "id": "8c7c5fd3f15db0ef",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "GET_VALUE_RESPONSE",
        "mode": "link",
        "links": [
            "d19197aaef49587d"
        ],
        "x": 800,
        "y": 220,
        "wires": [],
        "l": true
    },
    {
        "id": "d19197aaef49587d",
        "type": "link in",
        "z": "1f411be02ab63862",
        "g": "136bdd2bcb510ec7",
        "name": "GET_VALUE_RESPONSE",
        "links": [
            "8c7c5fd3f15db0ef"
        ],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "06f3bbbc1d516cf1"
            ]
        ],
        "l": true
    },
    {
        "id": "e6ee04b7463db73a",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "136bdd2bcb510ec7",
        "name": "send to clients",
        "mode": "link",
        "links": [
            "21c86b40c4cfef48"
        ],
        "x": 660,
        "y": 720,
        "wires": [],
        "l": true
    },
    {
        "id": "836b7cd5951b3d56",
        "type": "switch",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "currentValue",
        "property": "payload.object.property",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "currentValue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 60,
        "wires": [
            [
                "80b28f7ed34fcd65"
            ]
        ]
    },
    {
        "id": "80b28f7ed34fcd65",
        "type": "function",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "update data model",
        "func": "const networks = flow.get('zwaveNetworks') || {}\nconst devices = networks[msg.payload.networkId] || {}\nconst device = devices[msg.payload.node] || {}\nconst endpoints = device.endpoints || {}\nconst values = endpoints.values || {}\n\nvalues[msg.payload.object.commandClass] = msg.payload.object.newValue\nendpoints[msg.payload.object.endpoint] = values\ndevice.endpoints = endpoints\ndevices[msg.payload.node] = device\nnetworks[msg.payload.networkId] = devices\nflow.set('zwaveNetworks', networks)\nreturn {\n    topic: 'zwave/networks',\n    payload: networks,\n    retain: true\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 60,
        "wires": [
            [
                "bcafa36356776290"
            ]
        ]
    },
    {
        "id": "bcafa36356776290",
        "type": "link out",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "send to clients",
        "mode": "link",
        "links": [
            "21c86b40c4cfef48"
        ],
        "x": 1120,
        "y": 60,
        "wires": [],
        "l": true
    },
    {
        "id": "1d1d41bed6804f99",
        "type": "debug",
        "z": "1f411be02ab63862",
        "g": "800b06c9c0e3dff7",
        "name": "unsupported z-wave event",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 800,
        "y": 260,
        "wires": []
    },
    {
        "id": "7a8280ea5dca8519",
        "type": "debug",
        "z": "1f411be02ab63862",
        "g": "03ed41ef819b3f99",
        "name": "unsupported z-wave value id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 880,
        "y": 620,
        "wires": []
    },
    {
        "id": "850bcdb0dc51cae8",
        "type": "websocket out",
        "z": "4b6d972a36f40489",
        "g": "9f5cd0f49019ccbd",
        "name": "",
        "server": "d4736a641abe6778",
        "client": "",
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "0a466ae6484ea08d",
        "type": "function",
        "z": "4b6d972a36f40489",
        "g": "9f5cd0f49019ccbd",
        "name": "retain",
        "func": "const message = RED.util.cloneMessage(msg)\nconst retained = flow.get('retained') || {}\n\ntry {\n\n    if (message.retain === true) {\n\n        if ((message.topic === undefined) || (message.topic === '')) {\n\n            node.error(\"topic required when retain is true\", msg)\n            return null\n\n        }\n\n        if ((message.payload !== undefined) && (msg.payload !== '')) {\n\n            retained[message.topic] = RED.util.cloneMessage(message)\n\n        } else {\n\n            delete retained[message.topic]\n\n        }\n\n        flow.set('retained', retained)\n        message.retain = false\n\n    }\n\n    return message\n\n} finally {\n\n    node.status({\n        fill: 'blue',\n        shape: 'dot',\n        text: Object.keys(retained).length\n    })\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            [
                "850bcdb0dc51cae8"
            ]
        ]
    },
    {
        "id": "ad2823c8d3790d72",
        "type": "status",
        "z": "4b6d972a36f40489",
        "g": "9f5cd0f49019ccbd",
        "name": "client connection",
        "scope": [
            "e3245994f6289398"
        ],
        "x": 220,
        "y": 140,
        "wires": [
            [
                "5553c22baaeb1b99"
            ]
        ]
    },
    {
        "id": "5553c22baaeb1b99",
        "type": "switch",
        "z": "4b6d972a36f40489",
        "g": "9f5cd0f49019ccbd",
        "name": "",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "9a458b33c80238e5"
            ]
        ]
    },
    {
        "id": "9a458b33c80238e5",
        "type": "function",
        "z": "4b6d972a36f40489",
        "g": "9f5cd0f49019ccbd",
        "name": "retained",
        "func": "const retained = flow.get('retained') || {}\nconst messages = Object.values(retained)\n\ntry {\n\n    return [messages]\n\n} finally {\n\n    node.status({\n        fill: 'blue',\n        shape: 'dot',\n        text: messages.length\n    })\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "850bcdb0dc51cae8"
            ]
        ]
    },
    {
        "id": "e3245994f6289398",
        "type": "websocket in",
        "z": "4b6d972a36f40489",
        "g": "9f5cd0f49019ccbd",
        "name": "",
        "server": "d4736a641abe6778",
        "client": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "d3f36abf3bc85ef4"
            ]
        ]
    },
    {
        "id": "d3f36abf3bc85ef4",
        "type": "change",
        "z": "4b6d972a36f40489",
        "g": "9f5cd0f49019ccbd",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "0a466ae6484ea08d"
            ]
        ]
    }
]